*******MINIMAX********
import math
 
 
def minimax(curDepth, nodeIndex, maxTurn, scores, targetDepth):
 
  # base case : targetDepth reached
  if (curDepth == targetDepth):
    return scores[nodeIndex]
 
  if (maxTurn):
    return max(
      minimax(curDepth + 1, nodeIndex * 2, False, scores, targetDepth),
      minimax(curDepth + 1, nodeIndex * 2 + 1, False, scores, targetDepth))
 
  else:
    return min(
      minimax(curDepth + 1, nodeIndex * 2, True, scores, targetDepth),
      minimax(curDepth + 1, nodeIndex * 2 + 1, True, scores, targetDepth))
 
 
# Driver code
scores = [3, 5, 2, 9, 12, 5, 23, 23]
 
treeDepth = math.log(len(scores), 2)
 
print("The optimal value is : ", end="")
print(minimax(0, 0, True, scores, treeDepth))
 
 
 
 
 
 
*********TSP*********
from sys import maxsize
from itertools import permutations
 
V = 4
 
 
def travellingSalesmanProblem(graph, s):
 
  # store all vertex apart from source vertex
  vertex = []
  for i in range(V):
    if i != s:
      vertex.append(i)
 
  # store minimum weight Hamiltonian Cycle
  min_path = maxsize
  next_permutation = permutations(vertex)
  for i in next_permutation:
 
    # store current Path weight(cost)
    current_pathweight = 0
 
    # compute current path weight
    k = s
    for j in i:
      current_pathweight += graph[k][j]
      k = j
    current_pathweight += graph[k][s]
 
    # update minimum
    min_path = min(min_path, current_pathweight)
 
  return min_path
 
 
# Driver Code
if __name__ == "__main__":
 
  # matrix representation of graph
  graph = [[0, 10, 15, 20], [10, 0, 35, 25], [15, 35, 0, 30], [20, 25, 30, 0]]
  s = 0
print("The cost of most efficient tour", travellingSalesmanProblem(graph, s))
 
 
 
 
 
************DFS***********
def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    visited.add(start)
 
    print(start)
 
    for next in graph[start] - visited:
        dfs(graph, next, visited)
    return visited
 
 
graph = {'0': set(['1', '2']),
         '1': set(['2']),
         '2': set(['0', '3']),
         '3': set(['3'])}
 
dfs(graph, '2')
 
 
 
 
 
**********BFS**********
# BFS algorithm in Python
 
 
import collections
 
# BFS algorithm
def bfs(graph, root):
 
    visited, queue = set(), collections.deque([root])
    visited.add(root)
 
    while queue:
 
        # Dequeue a vertex from queue
        vertex = queue.popleft()
        print(str(vertex) + " ", end="")
 
        # If not visited, mark it as visited, and
        # enqueue it
        for neighbour in graph[vertex]:
            if neighbour not in visited:
                visited.add(neighbour)
                queue.append(neighbour)
 
 
if __name__ == '__main__':
    graph = {0: [1,2], 
             1: [2],
             2: [0,3],
             3: [3]}
    print("Following is Breadth First Traversal: ")
    bfs(graph, 2)
 
 
 
 
 
************A STAR************
def aStarAlgo(start_node, stop_node):
         
        open_set = set(start_node) 
        closed_set = set()
        g = {} #store distance from starting node
        parents = {}# parents contains an adjacency map of all nodes
 
        #ditance of starting node from itself is zero
        g[start_node] = 0
        #start_node is root node i.e it has no parent nodes
        #so start_node is set to its own parent node
        parents[start_node] = start_node         
        while len(open_set) > 0:
            n = None
          #node with lowest f() is found
            for v in open_set:
                if n == None or g[v] + heuristic(v) < g[n] + heuristic(n):
                    n = v                          
            if n == stop_node or Graph_nodes[n] == None:
                pass
            else:
                for (m, weight) in get_neighbors(n):
                    #nodes 'm' not in first and last set are added to first
                    #n is set its parent
                    if m not in open_set and m not in closed_set:
                        open_set.add(m)
                        parents[m] = n
                        g[m] = g[n] + weight
                         
     
                    #for each node m,compare its distance from start i.e g(m) to the
                    #from start through n node
                    else:
                        if g[m] > g[n] + weight:
                            #update g(m)
                            g[m] = g[n] + weight
                            #change parent of m to n
                            parents[m] = n
                             
                            #if m in closed set,remove and add to open
                            if m in closed_set:
                                closed_set.remove(m)
                                open_set.add(m)
            if n == None:
                print('Path does not exist!')
                return None
 
            # if the current node is the stop_node
            # then we begin reconstructin the path from it to the start_node
            if n == stop_node:
                path = []
                while parents[n] != n:
                    path.append(n)
                    n = parents[n]
                path.append(start_node)
                path.reverse()
                print('Path found: {}'.format(path))
                return path
            # remove n from the open_list, and add it to closed_list
            # because all of his neighbors were inspected
            open_set.remove(n)
            closed_set.add(n)
        print('Path does not exist!')
        return None        
#define fuction to return neighbor and its distance
#from the passed node
def get_neighbors(v):
    if v in Graph_nodes:
        return Graph_nodes[v]
    else:
        return None
#for simplicity we ll consider heuristic distances given
#and this function returns heuristic distance for all nodes
def heuristic(n):
        H_dist = {
            'A': 11,
            'B': 6,
            'C': 99,
            'D': 1,
            'E': 7,
            'G': 0,           
        }
        return H_dist[n]
#Describe your graph here  
Graph_nodes = {
    'A': [('B', 2), ('E', 3)],
    'B': [('C', 1),('G', 9)],
    'C': None,
    'E': [('D', 6)],
    'D': [('G', 1)],
     
}
aStarAlgo('A', 'G')
